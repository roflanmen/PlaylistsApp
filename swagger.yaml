openapi: 3.0.3
info:
  title: Playlists API
  version: 1.0.0
tags:
  - name: playlists
    description: Playlists management
  - name: tracks
    description: Tracks management
  - name: user
    description: User management
paths:
  /playlists:
    get: # get all public playlists
      tags:
        - playlists
      summary: Get all playlists
      operationId: getPlaylists
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Playlist'
    post: # create playlist
      tags:
        - playlists
      summary: Create playlist
      operationId: createPlaylist
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                isPublic:
                  type: boolean
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Playlist'
      security:
        - bearerAuth: []
  /playlists/{playlistId}:
    parameters:
      - name: playlistId
        in: path
        description: The id of the playlist
        required: true
        schema:
          type: integer
    get: # get playlist
      tags:
        - playlists
      summary: Get a playlist
      operationId: getPlaylist
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Playlist'
        '403':
          description: Forbidden
        '404':
          description: Not Found
      security:
        - bearerAuth: []
    post: # add track to playlist
      tags:
        - playlists
      summary: Add a track to a playlist
      operationId: addTrackToPlaylist
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Track'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Playlist'
        '400':
          description: Bad Request
        '403':
          description: Forbidden
        '404':
          description: Not Found
      security:
        - bearerAuth: []
    delete: # remove playlist
      tags:
        - playlists
      summary: Delete a playlist
      operationId: deletePlaylist
      responses:
        '204':
          description: No Content
        '403':
          description: Forbidden
        '404':
          description: Not Found
      security:
        - bearerAuth: []
  /playlists/{playlistId}/updatePlaylist:
    parameters:
      - name: playlistId
        in: path
        description: Playlist ID
        required: true
        schema:
          type: integer
    put: # create/overwrite playlist
      tags:
        - playlists
      summary: Update a playlist
      operationId: updatePlaylist
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: My playlist
                isPublic:
                  type: boolean
                  example: true
                tracks:
                  type: array
                  items:
                    $ref: '#/components/schemas/Track'
        required: true
      responses:
        '201':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Playlist'
        '400':
          description: Bad Request
        '403':
          description: Forbidden
      security:
        - bearerAuth: []
  /playlists/{playlistId}/tracks/{trackId}:
    parameters:
      - name: playlistId
        in: path
        description: Playlist ID
        required: true
        schema:
          type: integer
      - name: trackId
        in: path
        description: Track ID
        required: true
        schema:
          type: string
    delete: # remove track from playlist (check isPublic and owner)
      tags:
        - playlists
      summary: Delete a track from a playlist
      operationId: deletePlaylistTrack
      responses:
        '204':
          description: No Content
        '403':
          description: Forbidden
        '404':
          description: Not Found
      security:
        - bearerAuth: []

  /tracks/{trackId}:
    parameters:
      - name: trackId
        in: path
        description: Track ID
        required: true
        schema:
          type: string
    get: # get track
      tags:
        - tracks
      summary: Get a track
      operationId: getTrack
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        '404':
          description: Not Found

  /user:
    post: # create user
      tags:
        - user
      summary: Create a user
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: Sanjo
                passwordHash:
                  type: string
                  example: sd355ohf2348d
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request
  /user/login:
    post: # login user
      tags:
        - user
      summary: Login a user
      operationId: loginUser
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: Sanjo
                passwordHash:
                  type: string
                  example: sd355ohf2348d
      responses:
        '200':
          description: OK 
          headers:
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password provided
  /user/logout:
    post: # logout user
      tags:
        - user
      summary: Logout a user
      operationId: logoutUser
      responses:
        '200':
          description: OK
        '400':
          description: Invalid token provided
      security:
        - bearerAuth: []
  /user/{userId}:
    parameters:
      - name: userId
        in: path
        description: The id of the user
        required: true
        schema:
          type: integer
    get: # get user
      tags:
        - user
      summary: Get a user
      operationId: getUser
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Not Found
    put: # update user data
      tags:
        - user
      summary: Edit user data
      operationId: editUser
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: Sanjo
                passwordHash:
                  type: string
                  example: sd355ohf2348d
                newPasswordHash:
                  type: string
                  example: sd355ohf2348d
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request
        '403':
          description: Forbidden
        '404': 
          description: Not Found
      security:
        - bearerAuth: []
    delete: # remove user
      tags:
        - user
      summary: Delete a user
      operationId: deleteUser
      parameters:
        - name: passwordHash
          in: query
          description: Hash of password
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '403':
          description: Forbidden
        '404':
          description: Not Found
      security:
        - bearerAuth: []
  /search/tracks:
    get: # search tracks
      tags:
        - tracks
      summary: Search tracks
      operationId: searchTracks
      parameters:
        - name: query
          in: query
          description: Search query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Track'
  /search/playlists:
    get: # search playlists
      tags:
        - playlists
      summary: Search playlists
      operationId: searchPlaylists
      parameters:
        - name: query
          in: query
          description: Search query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Playlist'
  /search/users:
    get: # search users
      tags:
        - user
      summary: Search users
      operationId: searchUsers
      parameters:
        - name: query
          in: query
          description: Search query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  schemas:
    Track:
      type: object
      properties:
        id:
          type: string
          example: DK6IRG4CAbw
        title:
          type: string
          example: KORDHELL - KILLERS FROM THE NORTHSIDE
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        username:
          type: string
          example: roflanmen
        playlists:
          type: array
          items:
            $ref: '#/components/schemas/Playlist'
    Playlist:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: My playlist
        isPublic:
          type: boolean
          example: true
        owner:
          $ref: '#/components/schemas/User'
        tracks:
          type: array
          items:
            $ref: '#/components/schemas/Track'
